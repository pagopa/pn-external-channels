AWSTemplateFormatVersion: 2010-09-09
Description: 'Example microservice deploy'

Parameters:
  ProjectName:
    Type: String
    Description: 'Usually pn can be pnXYZ where XYZ are the feature number, useful to create
      experimental environments without crash official development environment'

  SendCronExpression:
    Type: String
    Description: Cron espression that activate sending to poste-italiane bucket

  InputBucketName:
    Type: String
    Description: bucket for comunication to poste-italiane
  InputBucketArn:
    Type: String
    Description: bucket for comunication to poste-italiane

  OutputBucketName:
    Type: String
    Description: bucket for comunication from poste-italiane
  OutputBucketArn:
    Type: String
    Description: bucket for comunication from poste-italiane

  ApiDnsName:
    Type: String
    Description: 'The DNS name used for B2B rest API.'

  WebApiDnsName:
    Type: String
    Description: 'The DNS name used for WEB rest API.'

  ContainerImageUri:
    Type: String
    Description: 'Exact container image URI with full repository and image digest'

  MicroserviceNumber:
    Type: Number
    Description: 'Disambiguation useful for load balancer rules'

  TemplateBucketBaseUrl:
    Type: String
    Description: 'The S3 bucket from which to fetch the templates used by this stack.'


  RecipesBucketName:
    Type: String
    Description: 'Where to write post office recipes'
  RecipesBucketArn:
    Type: String
    Description: 'Where to write post office recipes'

  ExternalChannelsElabResQueueName:
    Type: String
    Description: 'Internal queue'
  ExternalChannelsElabResQueueARN:
    Type: String
    Description: 'Internal Queue'

  ExternalChannelsInputsQueueName:
    Type: String
    Description: 'Send external-channel messages to this Queue'
  ExternalChannelsInputsQueueARN:
    Type: String
    Description: 'Send external-channel messages to this Queue'

  ExternalChannelsOutputsQueueName:
    Type: String
    Description: 'Pull external-channel messages from this Queue'
  ExternalChannelsOutputsQueueARN:
    Type: String
    Description: 'Pull external-channel messages from this Queue'

  KeyspaceName:
    Type: String
    Description: 'Where to write database data'

  ECSClusterName:
    Type: String
    Description: 'The name of the ECS cluster where the microservice is going to be deployed'

  SubnetsIds:
    Type: String
    Description: 'subnets ids comma separated list. Where to deploy the microservice'

  VpcId:
    Type: String
    Description: 'VpcId where the microservice is going to be deployed'

  ApplicationLoadBalancerListenerArn:
    Type: String
    Description: 'Load balancer listener where HTTP endpoints is going to be registered'

  ApplicationLoadBalancerDomain:
    Type: String
    Description: 'Base URL of the load balancer where the service is going to be reachable'

  NetworkLoadBalancerLink:
    Type: String
    Description: 'network load balancer link for API-GW'

Resources:

  # Example microservice
  ExternalChannelMicroservice:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: !Sub "${TemplateBucketBaseUrl}/fragments/ecs-service.yaml"
      Parameters:
        MicroServiceUniqueName: !Sub '${ProjectName}-ext-channels'
        CpuValue: 1024
        MemoryAmount: 2GB
        ContainerImageURI: !Sub '${ContainerImageUri}'
        ContainerEnvEntry1: !Sub 'SPRING_DATA_CASSANDRA_KEYSPACENAME=${KeyspaceName}'
        ContainerEnvEntry2: 'SPRING_DATA_CASSANDRA_SSL=true'
        ContainerEnvEntry3: !Sub 'SPRING_DATA_CASSANDRA_CONTACTPOINTS=cassandra.${AWS::Region}.${AWS::URLSuffix}:9142'
        ContainerEnvEntry4: 'DEVOPTIONS_FAKEPNEXTCHNSERVICE=true'
        ContainerEnvEntry5: !Sub 'JOB_CRONEXPRESSION=${SendCronExpression}'
        ContainerEnvEntry6: !Sub 'CLOUD_AWS_REGION_STATIC=${AWS::Region}'
        ContainerEnvEntry7: !Sub 'AWS_REGIONCODE=${AWS::Region}'
        ContainerEnvEntry8: !Sub 'SPRING_CLOUD_STREAM_BINDINGS_PNEXTCHNNOTIFPECINBOUND_DESTINATION=${ExternalChannelsInputsQueueName}'
        ContainerEnvEntry9: !Sub 'SPRING_CLOUD_STREAM_BINDINGS_PNEXTCHNELABRESULT_DESTINATION=${ExternalChannelsElabResQueueName}'
        ContainerEnvEntry10: !Sub 'SPRING_CLOUD_STREAM_BINDINGS_PNEXTCHNSTATUS_DESTINATION=${ExternalChannelsOutputsQueueName}'
        ContainerEnvEntry11: !Sub 'S3_BUCKETS_EXTERNALCHANNELSOUT=${OutputBucketName}'
        ContainerEnvEntry12: !Sub 'S3_BUCKETS_EXTERNALCHANNELSIN=${InputBucketName}'
        MappedPaths: '/external-channels/*,/external-channels-private/*'
        ECSClusterName: !Ref ECSClusterName
        Subnets: !Ref SubnetsIds
        VpcId: !Ref VpcId
        LoadBalancerListenerArn: !Ref ApplicationLoadBalancerListenerArn
        LoadbalancerRulePriority: !Ref MicroserviceNumber

  # Grant operational rights to Example microservice
  ExternalChannelMicroserviceTaskPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: !Sub '${ProjectName}-ext-channels-CustomTaskPolicy'
      Roles:
        - !GetAtt ExternalChannelMicroservice.Outputs.TaskRoleName
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - sqs:ChangeMessageVisibility
              - sqs:ChangeMessageVisibilityBatch
              - sqs:DeleteMessage
              - sqs:DeleteMessageBatch
              - sqs:GetQueueAttributes
              - sqs:GetQueueUrl
              - sqs:ReceiveMessage
              - sqs:SendMessage
              - sqs:SendMessageBatch
            Resource:
              - !Ref ExternalChannelsInputsQueueARN
              - !Ref ExternalChannelsOutputsQueueARN
              - !Ref ExternalChannelsElabResQueueARN
          - Effect: Allow
            Action:
              - s3:GetObject
              - s3:GetObjectAcl
              - s3:GetObjectLegalHold
              - s3:GetObjectRetention
              - s3:GetObjectTagging
              - s3:GetObjectVersion
              - s3:GetObjectVersionAcl
              - s3:GetObjectVersionTagging
              - s3:PutObject
              - s3:PutObjectLegalHold
              - s3:PutObjectRetention
              - s3:PutObjectTagging
              - s3:PutObjectVersionTagging
            Resource:
              - !Sub '${RecipesBucketArn}/*'
              - !Sub '${InputBucketArn}/*'
              - !Sub '${OutputBucketArn}/*'
          - Effect: Allow
            Action:
              - s3:ListBucket
            Resource:
              - !Ref RecipesBucketArn
              - !Ref InputBucketArn
              - !Ref OutputBucketArn
          - Effect: Allow
            Action:
              - cassandra:Modify
              - cassandra:Select
            Resource:
              - !Sub "arn:aws:cassandra:*:${AWS::AccountId}:/keyspace/*/table/*"


  # Expose Example public API with API-GW for B2B usage
  ExternalChannelMicroservicePublicAPI:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: !Sub "${TemplateBucketBaseUrl}/fragments/api-gw-expose-service.yaml"
      Parameters:
        MicroServiceUniqueName: !Sub '${ProjectName}-external-channel'
        IntendedUsage: B2B
        DnsName: !Ref ApiDnsName
        ProjectName: !Ref ProjectName
        ServiceApiPath: 'external-channels'
        NetworkLoadBalancerLink: !Ref NetworkLoadBalancerLink
        ApplicationLoadBalancerDomain: !Ref ApplicationLoadBalancerDomain

  # Expose Example public API with API-GW for WEB usage
  ExternalChannelMicroservicePublicWebAPI:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: !Sub "${TemplateBucketBaseUrl}/fragments/api-gw-expose-service.yaml"
      Parameters:
        MicroServiceUniqueName: !Sub '${ProjectName}-external-channel'
        IntendedUsage: WEB
        DnsName: !Ref WebApiDnsName
        ProjectName: !Ref ProjectName
        ServiceApiPath: 'external-channels'
        NetworkLoadBalancerLink: !Ref NetworkLoadBalancerLink
        ApplicationLoadBalancerDomain: !Ref ApplicationLoadBalancerDomain
